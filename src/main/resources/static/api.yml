openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://controlepedidos:8080/api/v1
    description: Generated server url
paths:
  /products/{id}:
    get:
      tags:
        - product-controller
      operationId: findById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDTO"
    put:
      tags:
        - product-controller
      operationId: update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDTO"
    delete:
      tags:
        - product-controller
      operationId: deleteById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
  /orders/startPreparation:
    put:
      tags:
        - orders-controller
      operationId: startPreparation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderStatusDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderDTO"
  /orders/informReady:
    put:
      tags:
        - orders-controller
      operationId: informReady
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderStatusDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderDTO"
  /orders/informDone:
    put:
      tags:
        - orders-controller
      operationId: informDone
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderStatusDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderDTO"
  /products:
    get:
      tags:
        - product-controller
      operationId: findAll
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResponseProductDTO"
    post:
      tags:
        - product-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDTO"
  /customers:
    get:
      tags:
        - customer-controller
      operationId: findAll_1
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResponseCustomerDTO"
    post:
      tags:
        - customer-controller
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerDTO"
  /checkout:
    post:
      tags:
        - checkout-controller
      operationId: doCheckout
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DoCheckoutRequestDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentDataResponseDTO"
  /checkout/confirmMercadoPagoQRCodePayment:
    post:
      tags:
        - checkout-controller
      operationId: confirmPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MercadoPagoQRCodePaymentCallbackDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MercadoPagoQrCodePaymentCallbackResponseDTO"
  /carts:
    post:
      tags:
        - carts-controller
      operationId: createCart
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCartRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartResponseDto"
  /carts/{cartId}/items:
    post:
      tags:
        - carts-controller
      operationId: addItem
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateItemRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartResponseDto"
  /carts/{cartId}/identify:
    post:
      tags:
        - carts-controller
      operationId: associateCustomer
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartAssociateCustomerRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartResponseDto"
  /carts/{cartId}/items/{itemId}:
    delete:
      tags:
        - carts-controller
      operationId: removeItem
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartResponseDto"
    patch:
      tags:
        - carts-controller
      operationId: updateItemQuantity
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateItemQuantityRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartResponseDto"
  /orders/getAll:
    get:
      tags:
        - orders-controller
      operationId: getAll
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResponseOrderDTO"
  /orders/getAllToPrepare:
    get:
      tags:
        - orders-controller
      operationId: getAllToPrepare
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResponseOrderDTO"
  /orders/getAllReady:
    get:
      tags:
        - orders-controller
      operationId: getAllReady
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResponseOrderDTO"
  /orders/getAllInPreparation:
    get:
      tags:
        - orders-controller
      operationId: getAllInPreparation
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResponseOrderDTO"
  /orders/getAllDone:
    get:
      tags:
        - orders-controller
      operationId: getAllDone
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResponseOrderDTO"
  /customers/{cpf}:
    get:
      tags:
        - customer-controller
      operationId: findByCPF
      parameters:
        - name: cpf
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerDTO"
  /carts/{cartId}:
    get:
      tags:
        - carts-controller
      operationId: findById_1
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartResponseDto"
    delete:
      tags:
        - carts-controller
      operationId: deleteCartById
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
  /customers/{id}:
    delete:
      tags:
        - customer-controller
      operationId: deleteById_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
components:
  schemas:
    ProductDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        price:
          type: integer
          format: int32
        category:
          type: string
          enum:
            - LANCHE
            - BEBIDA
            - ACOMPANHAMENTO
            - SOBREMESA
        description:
          type: string
        active:
          type: boolean
        image:
          type: string
      required:
        - category
        - description
        - name
        - price
    UpdateOrderStatusDTO:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
      required:
        - orderId
    OrderDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customerName:
          type: string
        status:
          type: string
        orderNumber:
          type: integer
          format: int32
    CustomerDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cpf:
          type: string
        nome:
          type: string
        email:
          type: string
      required:
        - email
        - nome
    DoCheckoutRequestDTO:
      type: object
      properties:
        cartId:
          type: string
          format: uuid
      required:
        - cartId
    PaymentDataResponseDTO:
      type: object
      properties:
        orderID:
          type: string
          format: uuid
        paymentStatus:
          type: string
        provider:
          type: string
        qrCode:
          type: string
    MercadoPagoQRCodePaymentCallbackDTO:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
        paidValue:
          type: number
      required:
        - orderId
        - paidValue
    MercadoPagoQrCodePaymentCallbackResponseDTO:
      type: object
      properties:
        paymentId:
          type: string
          format: uuid
        customerName:
          type: string
        orderId:
          type: string
          format: uuid
        orderNumber:
          type: integer
          format: int32
        status:
          type: string
    CreateCartRequest:
      type: object
      properties:
        customerId:
          type: string
          format: uuid
        item:
          $ref: "#/components/schemas/CreateItemRequest"
    CreateItemRequest:
      type: object
      properties:
        productId:
          type: string
        quantity:
          type: integer
          format: int32
          minimum: 1
      required:
        - productId
    CartItemResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        name:
          type: string
        priceCents:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
        subtotalCents:
          type: integer
          format: int32
    CartResponseDto:
      type: object
      properties:
        cartId:
          type: string
          format: uuid
        customerId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItemResponseDto"
        totalCents:
          type: integer
          format: int32
    CartAssociateCustomerRequest:
      type: object
      properties:
        customerId:
          type: string
          format: uuid
      required:
        - customerId
    UpdateItemQuantityRequest:
      type: object
      properties:
        quantity:
          type: integer
          format: int32
          minimum: 0
    Pageable:
      type: object
      properties:
        page:
          type: integer
          format: int32
          minimum: 0
        size:
          type: integer
          format: int32
          minimum: 1
        sort:
          type: array
          items:
            type: string
    PagedResponseProductDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/ProductDTO"
        pageNumber:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    PagedResponseOrderDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/OrderDTO"
        pageNumber:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    PagedResponseCustomerDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/CustomerDTO"
        pageNumber:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
